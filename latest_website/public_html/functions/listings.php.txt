<?php
// Prevents redefinition of functions if this file is included multiple times
if (!defined('SUPABASE_LISTINGS_LOADED')) {
    define('SUPABASE_LISTINGS_LOADED', true);

    // Helper function to check if a JWT token is expired
    if (!function_exists('isTokenExpired')) {
        function isTokenExpired($accessToken) {
            $jwtParts = explode('.', $accessToken);
            if (count($jwtParts) !== 3) return true;
            $payload = json_decode(base64_decode($jwtParts[1]), true);
            $exp = $payload['exp'] ?? 0;
            return time() >= $exp;
        }
    }

    // Helper function to refresh an access token
    if (!function_exists('refreshAccessToken')) {
        function refreshAccessToken($refreshToken, $supabaseUrl, $supabaseKey) {
            $url = $supabaseUrl . '/auth/v1/token?grant_type=refresh_token';
            $data = ['refresh_token' => $refreshToken];
            $headers = [
                'apikey: ' . $supabaseKey,
                'Content-Type: application/json'
            ];
            $response = makeHttpRequest($url, 'POST', $headers, json_encode($data));
            if (isset($response['error'])) {
                error_log("Token refresh failed: " . ($response['error']['message'] ?? 'Unknown error'));
                return false;
            }
            return $response;
        }
    }

    if (!function_exists('fetchListingsByUser')) {
        function fetchListingsByUser($userId, $supabaseKey, $restUrl) {
            global $message;
            $headers = getCommonHeaders($supabaseKey);
            $url = $restUrl . '/listings?select=id,title,price,type,location,description,image_url,user_id,created_at,contact_email,contact_phone,preferred_contact&user_id=eq.' . $userId . '&order=created_at.desc';
            $response = makeHttpRequest($url, 'GET', $headers);

            // Log the raw response for debugging
            error_log("fetchListingsByUser - Raw Response: " . json_encode($response));

            if ($response === false) {
                $message = "Fetch Listings Failed: Unable to connect to Supabase or invalid response. URL: $url, Response: " . json_encode($response);
                error_log("Fetch Listings Failed: Unable to connect to Supabase or invalid response. URL: $url, Response: " . json_encode($response));
                return [];
            }
            if (is_array($response) && isset($response['error'])) {
                $errorMessage = $response['error']['message'] ?? json_encode($response['error'] ?? 'Unknown error');
                $message = "Fetch Listings Failed: " . $errorMessage . " (URL: $url, Response: " . json_encode($response) . ")";
                error_log("Fetch Listings Failed: " . $errorMessage . " (URL: $url, Response: " . json_encode($response) . ")");
                return [];
            }
            // If the response is an empty array, do not set an error message
            if (empty($response)) {
                error_log("No listings found for user ID: $userId");
            }
            return $response;
        }
    }

    if (!function_exists('createListing')) {
        function createListing($postData, $files, $session, $supabaseUrl, $supabaseKey, $storageUrl, $restUrl) {
            global $message;

            $token = $postData['form_token'] ?? '';
            if (!validateFormToken($token, 'create_listing_form')) {
                $message = "Invalid form submission.";
                error_log("Create Listing Failed: Invalid form submission. Token: $token");
                return false;
            }

            if (!isset($session['access_token']) || !isset($session['user_id'])) {
                $message = "Please sign in to create a listing.";
                error_log("Create Listing Failed: User not authenticated.");
                return false;
            }

            // Refresh the access token if it's expired
            if (isTokenExpired($session['access_token'])) {
                $newTokens = refreshAccessToken($session['refresh_token'], $supabaseUrl, $supabaseKey);
                if ($newTokens && isset($newTokens['access_token'])) {
                    $_SESSION['access_token'] = $newTokens['access_token'];
                    $_SESSION['refresh_token'] = $newTokens['refresh_token'];
                    $session['access_token'] = $newTokens['access_token'];
                } else {
                    $message = "Failed to refresh access token. Please sign in again.";
                    error_log("Create Listing Failed: Unable to refresh access token.");
                    return false;
                }
            }

            $title = $postData['title'] ?? '';
            $price = $postData['price'] ?? '';
            $type = $postData['type'] ?? '';
            $location = $postData['location'] ?? '';
            $description = trim($postData['description'] ?? '');
            $contact_email = trim($postData['contact_email'] ?? '');
            $contact_phone = trim($postData['contact_phone'] ?? '');
            $preferred_contact = $postData['preferred_contact'] ?? '';
            $imageFile = $files['image'] ?? null;

            if (empty($title) || empty($price) || empty($type) || empty($location) || empty($preferred_contact) || !$imageFile) {
                $message = "Create Failed: Title, price, type, location, preferred contact method, and image are required.";
                error_log("Create Listing Failed: Missing required fields.");
                return false;
            }

            $price = floatval($price);
            if ($price <= 0) {
                $message = "Create Failed: Price must be a positive number.";
                error_log("Create Listing Failed: Invalid price: $price");
                return false;
            }

            if (empty($contact_email) && empty($contact_phone)) {
                $message = "Create Failed: At least one contact method (email or phone) must be provided.";
                error_log("Create Listing Failed: Both contact email and phone are empty.");
                return false;
            }

            if (!empty($contact_email) && !filter_var($contact_email, FILTER_VALIDATE_EMAIL)) {
                $message = "Create Failed: Invalid contact email.";
                error_log("Create Listing Failed: Invalid contact email: $contact_email");
                return false;
            }

            if (!in_array($preferred_contact, ['email', 'phone'])) {
                $message = "Create Failed: Invalid preferred contact method.";
                error_log("Create Listing Failed: Invalid preferred contact method: $preferred_contact");
                return false;
            }

            if ($preferred_contact === 'email' && empty($contact_email)) {
                $message = "Create Failed: Contact email is required when preferred contact method is email.";
                error_log("Create Listing Failed: Contact email is required when preferred contact method is email.");
                return false;
            }

            if ($preferred_contact === 'phone' && empty($contact_phone)) {
                $message = "Create Failed: Contact phone is required when preferred contact method is phone.";
                error_log("Create Listing Failed: Contact phone is required when preferred contact method is phone.");
                return false;
            }

            if ($imageFile['error'] !== UPLOAD_ERR_OK) {
                $message = "Image upload failed: " . $imageFile['error'];
                error_log("Image upload failed: " . $imageFile['error']);
                return false;
            }

            // Validate file type and size
            $allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!in_array($imageFile['type'], $allowedTypes)) {
                $message = "Create Failed: Only JPEG, PNG, and GIF images are allowed.";
                error_log("Create Listing Failed: Invalid image type: " . $imageFile['type']);
                return false;
            }

            $maxFileSize = 5 * 1024 * 1024; // 5 MB
            if ($imageFile['size'] > $maxFileSize) {
                $message = "Create Failed: Image size exceeds 5 MB.";
                error_log("Create Listing Failed: Image size exceeds 5 MB: " . $imageFile['size']);
                return false;
            }

            $fileName = time() . '_' . $imageFile['name'];
            $tmpName = $imageFile['tmp_name'];
            $uploadUrl = $storageUrl . '/object/listings-images/public/' . $fileName;

            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $uploadUrl);
            curl_setopt($ch, CURLOPT_PUT, true);
            curl_setopt($ch, CURLOPT_INFILE, fopen($tmpName, 'r'));
            curl_setopt($ch, CURLOPT_INFILESIZE, filesize($tmpName));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'Authorization: Bearer ' . $session['access_token'],
                'Content-Type: ' . $imageFile['type'],
                'x-upsert: true'
            ]);
            $uploadResponse = curl_exec($ch);
            $curlError = curl_error($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            if ($uploadResponse === false || $httpCode >= 400) {
                $message = "Image upload failed: " . ($curlError ?: "HTTP $httpCode - Response: $uploadResponse");
                error_log("Image upload failed: " . ($curlError ?: "HTTP $httpCode - Response: $uploadResponse"));
                return false;
            }

            $imageUrl = $supabaseUrl . '/storage/v1/object/public/listings-images/public/' . $fileName;
            $listingData = [
                'title' => $title,
                'price' => $price,
                'type' => $type,
                'location' => $location,
                'description' => $description ?: null,
                'contact_email' => $contact_email ?: null,
                'contact_phone' => $contact_phone ?: null,
                'preferred_contact' => $preferred_contact,
                'image_url' => $imageUrl,
                'user_id' => $session['user_id'] ?? ''
            ];
            $data = json_encode($listingData);
            $headers = getCommonHeaders($supabaseKey, $session['access_token'], ['Prefer: return=representation']);

            $response = makeHttpRequest($restUrl . '/listings', 'POST', $headers, $data);
            if (isset($response['error'])) {
                $message = "Create Failed: " . ($response['error']['message'] ?? 'Unknown error') . " (Status: {$response['status']})";
                error_log("Create Listing Failed: " . ($response['error']['message'] ?? 'Unknown error') . " (Status: {$response['status']})");
                return false;
            }

            $listingData = $response[0];
            $message = "Listing created successfully!";
            return $listingData;
        }
    }

    if (!function_exists('fetchListings')) {
        function fetchListings($supabaseKey, $restUrl, $authToken = null, $userId = null) {
            global $message, $listings;

            // Refresh the access token if it's provided and expired
            if ($authToken && isTokenExpired($authToken)) {
                $newTokens = refreshAccessToken($_SESSION['refresh_token'] ?? '', $supabaseUrl, $supabaseKey);
                if ($newTokens && isset($newTokens['access_token'])) {
                    $_SESSION['access_token'] = $newTokens['access_token'];
                    $_SESSION['refresh_token'] = $newTokens['refresh_token'];
                    $authToken = $newTokens['access_token'];
                } else {
                    $message = "Failed to refresh access token. Please sign in again.";
                    error_log("Fetch Listings Failed: Unable to refresh access token.");
                    return [];
                }
            }

            $headers = getCommonHeaders($supabaseKey, $authToken, ['Prefer: return=representation']);
            
            $url = $restUrl . '/listings?select=id,title,price,type,location,description,image_url,user_id,created_at,contact_email,contact_phone,preferred_contact&order=created_at.desc';
            $response = makeHttpRequest($url, 'GET', $headers);
            
            if ($response === false || (is_array($response) && isset($response['error']))) {
                $errorMessage = $response['error']['message'] ?? json_encode($response['error'] ?? 'Unknown error');
                $message = "Fetch Failed: " . $errorMessage;
                error_log("Fetch Listings Failed: " . $errorMessage . " (URL: $url)");
                return [];
            }

            $listings = $response;
            error_log("Fetched " . count($listings) . " listings.");
            return $listings;
        }
    }

    if (!function_exists('searchListings')) {
        function searchListings($postData, $supabaseKey, $restUrl, $authToken = null, $userId = null) {
            global $message, $listings;

            // Refresh the access token if it's provided and expired
            if ($authToken && isTokenExpired($authToken)) {
                $newTokens = refreshAccessToken($_SESSION['refresh_token'] ?? '', $supabaseUrl, $supabaseKey);
                if ($newTokens && isset($newTokens['access_token'])) {
                    $_SESSION['access_token'] = $newTokens['access_token'];
                    $_SESSION['refresh_token'] = $newTokens['refresh_token'];
                    $authToken = $newTokens['access_token'];
                } else {
                    $message = "Failed to refresh access token. Please sign in again.";
                    error_log("Search Listings Failed: Unable to refresh access token.");
                    return [];
                }
            }

            $queryParts = ['select=id,title,price,type,location,description,image_url,user_id,created_at,contact_email,contact_phone,preferred_contact', 'order=created_at.desc'];

            if (!empty($postData['animal-type'])) {
                $animalType = trim($postData['animal-type']);
                $queryParts[] = 'type=ilike.' . rawurlencode("%$animalType%");
            }

            if (!empty($postData['location'])) {
                $location = trim($postData['location']);
                $queryParts[] = 'location=ilike.' . rawurlencode("%$location%");
            }

            if (!empty($postData['min-price'])) {
                $minPrice = filter_var($postData['min-price'], FILTER_VALIDATE_FLOAT);
                if ($minPrice === false || $minPrice < 0) {
                    $message = "Search Failed: Invalid minimum price.";
                    error_log("Search Failed: Invalid minimum price: {$postData['min-price']}");
                    return [];
                }
                $queryParts[] = 'price=gte.' . rawurlencode($minPrice);
            }

            if (!empty($postData['max-price'])) {
                $maxPrice = filter_var($postData['max-price'], FILTER_VALIDATE_FLOAT);
                if ($maxPrice === false || $maxPrice < 0) {
                    $message = "Search Failed: Invalid maximum price.";
                    error_log("Search Failed: Invalid maximum price: {$postData['max-price']}");
                    return [];
                }
                $queryParts[] = 'price=lte.' . rawurlencode($maxPrice);
            }

            if (isset($minPrice) && isset($maxPrice) && $minPrice > $maxPrice) {
                $message = "Search Failed: Minimum price cannot exceed maximum price.";
                error_log("Search Failed: Minimum price ($minPrice) cannot exceed maximum price ($maxPrice).");
                return [];
            }

            $query = '?' . implode('&', $queryParts);
            $headers = getCommonHeaders($supabaseKey, $authToken, ['Prefer: return=representation']);
            $url = $restUrl . '/listings' . $query;
            $response = makeHttpRequest($url, 'GET', $headers);

            if ($response === false) {
                $message = "Search Failed: Unable to connect to Supabase.";
                error_log("Search Failed: Unable to connect to Supabase. URL: $url");
                return [];
            }
            if (is_array($response) && isset($response['error'])) {
                $errorMessage = $response['error']['message'] ?? json_encode($response['error'] ?? 'Unknown error');
                $message = "Search Failed: " . $errorMessage;
                error_log("Search Failed: " . $errorMessage . " (URL: $url)");
                return [];
            }

            $listings = $response;
            error_log("Found " . count($listings) . " listings from search.");

            $message = empty($listings) ? "No listings found matching your criteria." : "Found " . count($listings) . " listing(s).";
            return $listings;
        }
    }
}